@page "/"
@rendermode InteractiveServer

@using INTERNET_SHOP.Models
@using Microsoft.EntityFrameworkCore
@using System.Net.NetworkInformation
@using System.Net.Sockets
@using System.Management
@inject IDbContextFactory<INTERNET_SHOP.Data.INTERNET_SHOPContext> Db

<PageTitle>Афиша</PageTitle>
<link href="/Styles/index.css" rel="stylesheet" type="text/css">
<div class="container">
    <header class="header">
        <h1>Магазин Техники</h1>
        <nav class="nav">
            <a href="/">Афиша</a>
            <a href="/catalog">Категории</a>
            <a href="/cart">Корзина</a>
            <a href="/contact">Контакты</a>
        </nav>
    </header>

    <section class="products">
        <!-- Пример карточки товара -->
        @for (var i = 1; i <= 6; i++)
        {
            <div class="product-card">
                <img class="product-image" src="https://via.placeholder.com/250x200" alt="Товар @i">
                <div class="product-info">
                    <h2 class="product-title">Товар #{i}</h2>
                    <p class="product-price">₽{i * 1000}</p>
                    <button class="add-to-cart">В корзину</button>
                </div>
            </div>
        }
    </section>
</div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await UserEntered();
        }
        catch
        {
            Console.WriteLine("Произошла системная ошибка.");
        }
    }

    private async Task UserEntered()
    {
        //Выкачка данных с пользователя при его отсутствии в БД
        string pcName = Environment.UserName;

        using var context = Db.CreateDbContext();

        if (await context.User.FirstOrDefaultAsync(u => u.PcName == pcName) is null)
        {
            string os = Environment.OSVersion.ToString();
            string ipAdress = "";
            string manufacturer = "";
            string externalIp = await GetExternalIpAddressAsync();

            using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from Win32_Processor"))
            {
                foreach (ManagementObject obj in searcher.Get())
                {
                    manufacturer = obj["Manufacturer"].ToString() ?? "";
                }
            }

            NetworkInterface[] interfaces = NetworkInterface.GetAllNetworkInterfaces();
            foreach (NetworkInterface ni in interfaces)
            {
                IPInterfaceProperties properties = ni.GetIPProperties();
                foreach (UnicastIPAddressInformation ip in properties.UnicastAddresses)
                {
                    if (ip.Address.AddressFamily == AddressFamily.InterNetwork)
                    {
                        ipAdress = ip.Address.ToString();
                    }
                }
            }

            context.User.Add(new User
                {
                    PcName = pcName,
                    OS = os,
                    IP = ipAdress,
                    ManufacturerProcessor = manufacturer,
                    ExternalIp = externalIp
                });
            await context.SaveChangesAsync();
        }
    }

    private async Task<string> GetExternalIpAddressAsync()
    {
        using HttpClient client = new HttpClient();
        try
        {
            var response = await client.GetStringAsync("https://api.ipify.org");
            return response;
        }
        catch
        {
            return "";
        }
    }
}