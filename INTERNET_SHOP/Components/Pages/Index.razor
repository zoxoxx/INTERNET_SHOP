@page "/"
@rendermode InteractiveServer

@using INTERNET_SHOP.Models
@using INTERNET_SHOP.Models.Entities
@using Microsoft.EntityFrameworkCore
@using System.Net.NetworkInformation
@using System.Net.Sockets
@using System.Management

@inject IHttpContextAccessor httpContextAccessor
@inject IDbContextFactory<INTERNET_SHOP.Data.INTERNET_SHOPContext> Db
@inject NavigationManager navigationManager

<PageTitle>Афиша</PageTitle>
<link href="/Styles/index.css" rel="stylesheet" type="text/css">
<div class="container">
    <header class="header">
        <h1>Афиша</h1>
        <nav class="nav">
            <a href="/">Афиша</a>
            <a href="/catalog">Категории</a>
            <a href="/cart">Корзина</a>
            <a href="/contact">Контакты</a>
        </nav>
    </header>

    @if(movies.Count > 0)
    {
        <section class="products">
            <!-- Пример карточки товара -->
            @for (var i = 1; i <= movies.Count; i++)
            {
                <div class="product-card">
                    <img class="product-image" src="https://via.placeholder.com/250x200" alt="Товар @i">
                    <div class="product-info">
                        <h2 class="product-title">Товар #{@movies[i].Product.Name.ToString()}</h2>
                        <p class="product-price">₽{@movies[i].Product.Price}</p>
                        <button class="add-to-cart" onclick="@AboutButtonClick(movies[i])">Ознакомиться</button>
                    </div>
                </div>
            }
        </section>
    }
    else
    {
        <div style="color: #fff; text-align: center; padding: 50px 0;">
            <h1>К сожалению, сеансов нет</h1>
            <p>Следите за обновлениями и возвращайтесь позже!</p>
        </div>
    }
</div>

@code
{
    List<Afisha> movies { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await UserEntered();
            await LoadProducts();
        }
        catch
        {
            Console.WriteLine("Произошла системная ошибка.");
        }
    }

    private async Task UserEntered()
    {
        //Выкачка данных с пользователя при его отсутствии в БД
        string pcName = Environment.UserName;
        using var context = Db.CreateDbContext();
        var userAgent = httpContextAccessor.HttpContext?.Request.Headers["User-Agent"].ToString();

        if (userAgent is null)
            return;

        if (userAgent.Contains("Mobile"))
            return;
        if (await context.User.FirstOrDefaultAsync(u => u.PcName == pcName) is null)
        {
            string os = Environment.OSVersion.ToString();
            string ipAdress = "";
            string manufacturer = "";
            string externalIp = await GetExternalIpAddressAsync();

            using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from Win32_Processor"))
            {
                foreach (ManagementObject obj in searcher.Get())
                {
                    manufacturer = obj["Manufacturer"].ToString() ?? "";
                }
            }

            NetworkInterface[] interfaces = NetworkInterface.GetAllNetworkInterfaces();
            foreach (NetworkInterface ni in interfaces)
            {
                IPInterfaceProperties properties = ni.GetIPProperties();
                foreach (UnicastIPAddressInformation ip in properties.UnicastAddresses)
                {
                    if (ip.Address.AddressFamily == AddressFamily.InterNetwork)
                    {
                        ipAdress = ip.Address.ToString();
                    }
                }
            }

            context.User.Add(new User
                {
                    PcName = pcName,
                    OS = os,
                    IP = ipAdress,
                    ManufacturerProcessor = manufacturer,
                    ExternalIp = externalIp
                });
            await context.SaveChangesAsync();
        }
    }

    private async Task<string> GetExternalIpAddressAsync()
    {
        using HttpClient client = new HttpClient();
        try
        {
            var response = await client.GetStringAsync("https://api.ipify.org");
            return response;
        }
        catch
        {
            return "";
        }
    }

    private async Task LoadProducts()
    {
        TimeOnly timeNow = TimeOnly.FromDateTime(DateTime.Now);
        DateOnly dateNow = DateOnly.FromDateTime(DateTime.Now);

        using var context = Db.CreateDbContext();
        movies = await context.Afisha
            .Join(context.Schedule,
            a => a.Id,
            s => s.AfishaId,
            (af, sc) => new {af, sc})
            .Where( s => s.sc.DateEvent >= dateNow && s.sc.TimeEndEvent > timeNow)
            .OrderByDescending(s => s.sc.Product.Name)
            .OrderByDescending(s => s.sc.DateEvent)
            .Select( s => s.af)
            .Take(15)
            .Distinct()
            .ToListAsync();
    }

    private async Task AboutButtonClick(Afisha afisha)
    {
        
    }
}