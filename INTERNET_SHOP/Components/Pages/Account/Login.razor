@page "/login"

@inject INTERNET_SHOPContext dbContext
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="" style="max-height:5rem;" />
                <h3>Логин</h3>
            </div>
            <div class="mb-3">
                <label>Имя пользователя</label>
                <InputText @bind-Value="Model.Login" class="form-control" placeholder="Логин" />
                <ValidationMessage For="() => Model.Login" />
            </div>
            <div class="mb-3">
                <label>Пароль</label>
                <InputText @bind-Value="Model.Password" placeholder="Пароль" type="password" class="form-control"/>
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger"></span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Зарегистрироваться</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var userAccount = dbContext.UserAutorize.Where(u => u.Login == Model.Login).FirstOrDefault();

        if (userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Данные введены неверно.";
            return;
        }
        var role = dbContext.Role.Where(r => r.Id == userAccount.RoleId).First();
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.Login),
            new Claim(ClaimTypes.Role, role.Name),
            new Claim(ClaimTypes.PrimarySid, userAccount.Id.ToString())
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");
    }
}
